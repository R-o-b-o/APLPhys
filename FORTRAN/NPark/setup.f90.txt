! NMDC
! A code for molecular dynamics using a Nose-Poincare thermostat and 
! an Andersen barostat.
!
! N Park
! AWE Aldermaston, Reading, Berks
! RCS data
! $Id: setup.f90,v 1.17 2005/05/06 10:53:31 gnpk Exp gnpk $


MODULE setup

  USE kind_mod
  use global_params_mod
  IMPLICIT NONE

  PRIVATE

  PUBLIC setup_integrate, create_atoms, create_vels, &
       ens_out, thermo_out, read_atoms
  PUBLIC LJ_rcut, LJ_eps, LJ_sigma, powerlaw_const, powerlaw_index
  PUBLIC eam_dat, meam_dat


  type(eam_params) :: eam_dat
  type(meam_params) :: meam_dat

CONTAINS

  !=============================================================================

  SUBROUTINE setup_integrate(lim, P, T, Qv, Qs, n, m, ns, h, nf, tf, sf, rf, rn, af)

    USE user_vars

    REAL(KIND=DBL), DIMENSION(2,3), INTENT(out) :: lim   ! box
    REAL(KIND=DBL), INTENT(out) :: P                     ! pressure
    REAL(KIND=DBL), INTENT(out) :: T                     ! temperature
    REAL(KIND=DBL), INTENT(out) :: Qv                    ! barostat mass
    REAL(KIND=DBL), INTENT(out) :: Qs                    ! thermostat mass
    REAL(KIND=DBL), INTENT(out) :: h                     ! timestep
    INTEGER, INTENT(out) :: n                            ! n atoms
    INTEGER, INTENT(out) :: m                            ! method
    INTEGER, INTENT(out) :: ns                           ! n timesteps
    INTEGER, INTENT(out) :: nf                           ! neigh rebuild freq
    INTEGER, INTENT(out) :: tf                           ! thermo out freq
    INTEGER, INTENT(out) :: sf                           ! snap out freq
    INTEGER, INTENT(out) :: rf                           ! restart out freq
    INTEGER, INTENT(out) :: rn                           ! restart in number
    INTEGER, INTENT(out) :: af                           ! read atom file unit

    LOGICAL :: start, fin
    CHARACTER(len=60) :: mth

    ! setup default values for 'stuff'

    ! box bounds
    lim(1,1) = -7.0d0
    lim(2,1) =  7.0d0
    lim(1,2) = -7.0d0
    lim(2,2) =  7.0d0
    lim(1,3) = -7.0d0
    lim(2,3) =  7.0d0

    !       P = 1.03406762355d-4  !6.2415d-7     ! Pressure
    P = 0.0d0                             ! Pressure
    T = 0.0d0                             ! Temp

    Qv = HUGE(Qv)                         ! Barostat mass
    !       Qv = 1.0d-10                  ! Barostat mass

    Qs = HUGE(Qs)                         ! Thermostat mass
    !       Qs = 1.0d1                    ! Thermostat mass

    n = 256                              ! natoms
    ! method = 1; ideal gas
    !          2; Lennard-Jones
    m = 1                                 ! method

    nf = 10

    ns = 100                              ! nsteps

    h = 1.0d-1                            ! timestep

    tf = 10                               ! thermo output freq

    sf = 100                              ! snapshot freq

    rf = 100                              ! restart freq

    ! Global variables
    LJ_rcut = 4.0d0

    ! set up parameters for Lennard Jones form
    LJ_sigma = 0.15d0 ! 9.0d-3
    LJ_eps = 3.0d0!6.0d-1
    powerlaw_const = 1.d0
    powerlaw_index = 2.d0

    ! set up parameters for EAM form
    eam_dat = eam_params(                &
     &     1.307921251628d1,        & !D
     &     8.28945997705d3,         & !a1
     &     1.83251035107d-2,        & !a2
     &     1.072729128641d1,        & !c1
     &     3.19759369823d-1,        & !c2
     &     4.218d0,                 & !rc1
     &     4.985d0                   )!rc2


    ! get input deck over-rides
    CALL get_user_vars(lim, P,T, Qv, Qs, n, m, ns, h, nf, tf, sf, rf, rn, af,fin)

    ! convert timestep from fs to natural units
    !h = h / 10.181d0

    WRITE (ofile,*) '# ', 'box xmin :', lim(1,1), 'box xmax :', lim(2,1)
    WRITE (ofile,*) '# ', 'box ymin :', lim(1,2), 'box ymax :', lim(2,2)
    WRITE (ofile,*) '# ', 'box zmin :', lim(1,3), 'box zmax :', lim(2,3)
    WRITE (ofile,*) '# ', 'N_atoms = ', n
    WRITE (ofile,*) '# ', 'Pressure :', 1602189.2d0*P
    WRITE (ofile,*) '# ', 'Temp :', T
    SELECT CASE (m)
    CASE(1)
       mth = 'ideal gas'
    CASE(2)
       mth = 'Lennard-Jones'
       write(mth(14:16),'(A)') ' ('
       write(mth(17:45),'(3f8.2)') LJ_rcut, LJ_sigma, LJ_eps
       write(mth(46:46),'(A)') ')'
    CASE(3)
       mth = 'soft-sphere'
    CASE(4)
       mth = 'power law'
    CASE(5)
       mth = 'embedded atom method'
    END SELECT
    WRITE (ofile,*) '# ', 'Method :', mth
    WRITE (ofile,*) '# ', 'Qv :', Qv, 'Qs :', Qs
    WRITE (ofile,*) '# ', 'timestep :', h*10.181d0, ' fs'
    WRITE (ofile,*) '# ', 'neighbour :', nf, 'nsteps : ', ns


    RETURN


  END SUBROUTINE setup_integrate

  !=============================================================================

  !SUBROUTINE setup_LJ

  !USE Lennard_Jones, only : LJ_sigma, LJ_eps

  !       rcut = 5.0d0
  !       LJ_sigma = 3.0d0!9.0d-3
  !       LJ_eps = 6.0d-1

  !       return


  !END SUBROUTINE setup_LJ

  !=============================================================================

  SUBROUTINE create_atoms(x, sub_box, v)

    REAL(KIND=DBL), DIMENSION(:,:), INTENT(in) :: sub_box
    REAL(KIND=DBL), DIMENSION(:,:), INTENT(inout) :: x
    REAL(KIND=DBL), INTENT(in) :: v

    REAL(KIND=DBL), DIMENSION(3) :: box_length
    REAL(KIND=DBL) :: dn
    INTEGER :: dir, n, i
    REAL(KIND=DBL) :: cbrn,tmp
    INTEGER, ALLOCATABLE, DIMENSION(:) :: nb

    CALL RANDOM_SEED()!generator=2)
    n = SIZE(x,2)
    dn = DBLE(n)
    cbrn = dn**(1./3.)
    ALLOCATE(nb(n))


    DO i = 1, n
       tmp = dble(i)
       x(1,i) = (tmp-0.5d0)/dn
       x(2,i) = NINT(cbrn)*x(1,i)
       x(2,i) = x(2,i) - INT(x(2,i))
       x(3,i) = NINT(cbrn*cbrn)*x(1,i)
       x(3,i) = x(3,i) - INT(x(3,i))
       CALL RANDOM_NUMBER(tmp)
       x(1,i) = x(1,i)+1e-3*(tmp-0.5)
       CALL RANDOM_NUMBER(tmp)
       x(2,i) = x(2,i)+1e-3*(tmp-0.5)
       CALL RANDOM_NUMBER(tmp)
       x(3,i) = x(3,i)+1e-3*(tmp-0.5)
    END DO
    DO dir = 1,3
       box_length(dir) = sub_box(2,dir) - sub_box(1,dir)

       x(dir,:) = x(dir,:) * box_length(dir)
       x(dir,:) = x(dir,:) + sub_box(1,dir)
    END DO
    RETURN


  END SUBROUTINE create_atoms


  !=============================================================================


  SUBROUTINE create_vels(n, x, t0, mv, m)

    IMPLICIT NONE

    INTEGER, INTENT(in) :: n
    REAL(KIND=DBL), DIMENSION(:,:), INTENT(in) :: x
    REAL(KIND=DBL), INTENT(in) :: t0
    REAL(KIND=DBL), DIMENSION(:,:), INTENT(inout) :: mv
    REAL(KIND=DBL), DIMENSION(:), INTENT(in) :: m

    INTEGER :: ii, jj
    REAL(KIND=DBL) :: g, vScale
    REAL(KIND=DBL) :: vx, vy, vz
    REAL(KIND=DBL) :: mom2, mv2, curTemp, scale



!   CALL RANDOM_SEED()


    !! Calculate the velocity scale
    g = 3*(N-1) + 1
    vScale = DSQRT( g * k_boltz * t0 * m(1) )


    !! Assign directional velocities
    DO ii = 1,n
      mv(1,ii) = vScale * rgauss()
      mv(2,ii) = vScale * rgauss()
      mv(3,ii) = vScale * rgauss()
    ENDDO


    !! Calculate net momentum
    vx = SUM( mv(1,:) )
    vy = SUM( mv(2,:) )
    vz = SUM( mv(3,:) )

  
    !!Remove net momentum
    vx = vx / n
    vy = vy / n
    vz = vz / n
    mv(1,:) = mv(1,:) - vx 
    mv(2,:) = mv(2,:) - vy 
    mv(3,:) = mv(3,:) - vz 


   !!Calculate net momentum
    vx = SUM( mv(1,:) )
    vy = SUM( mv(2,:) )
    vz = SUM( mv(3,:) )



    !! Rescale velocities to correct temperature
    mom2 = 0.0d0
    DO ii = 1,N
      DO jj = 1,3
        mom2 = mom2 + ( mv(jj,ii)*mv(jj,ii) )
      END DO
    END DO

    mv2 = mom2 / m(1)
    curTemp = mv2 /(g*k_boltz)

    scale = DSQRT( t0 / curTemp )

    mom2 = 0.0d0
    DO ii = 1,N
      DO jj = 1,3
        mv(jj,ii) = mv(jj,ii)*scale
        mom2 = mom2 + ( mv(jj,ii) * mv(jj,ii) )
      END DO
    ENDDO
    
    mv2 = mom2 / m(1)
    curTemp = mv2 /(g*k_boltz)

    RETURN

  END SUBROUTINE create_vels

  !=============================================================================

  REAL(KIND=DBL) FUNCTION rgauss()

    INTEGER :: ii
    REAL(KIND=DBL) :: dummy
    REAL(KIND=DBL) :: a1, a3, a5, a7, a9
    REAL(KIND=DBL) :: sum, r, r2


    a1 = 3.949846138d0
    a3 = 0.252408784d0
    a5 = 0.076542912d0
    a7 = 0.008355968d0
    a9 = 0.029899776d0

    sum = 0.0d0;

    DO ii = 1, 12
      CALL RANDOM_NUMBER(dummy)
      sum = sum + dummy
    ENDDO

    r  = (sum - 6.0d0) / 4.0d0
    r2 = r * r

    rgauss = ((((a9*r2 + a7 ) *r2 +a5) *r2 + a3) *r2 +a1) * r

    RETURN 

  END FUNCTION rgauss

  !=============================================================================

  SUBROUTINE ens_out(n, x, v, t)

    USE ens_dump

    INTEGER, INTENT(in) :: n
    REAL(KIND=DBL), DIMENSION(3,n), INTENT(in) :: x
    REAL(KIND=DBL), DIMENSION(3,n), INTENT(in) :: v
    REAL(KIND=DBL), INTENT(in) :: t
    REAL(KIND=DBL) :: tfs

    INTEGER, PARAMETER :: afile=11
    CHARACTER(LEN=80) :: filename
    INTEGER :: i, ierr


    filename = 'test'

    ! Convert time from code units to ps for output
    tfs = t*10.181d-3

    CALL snapshot(filename, x, v, n, tfs)

    RETURN
    filename='./test.out'

    OPEN(unit=afile, file=filename, status='replace', &
         action='write', iostat=ierr)
    IF(ierr.NE.0) CALL error('cannot open file')

    WRITE(afile,*) n

    DO i=1, n
       WRITE(afile,999) i, x(1,i), x(2,i), x(3,i)
    END DO

    CLOSE(afile)
999 FORMAT(i8,2x,3es13.5)

    RETURN

  END SUBROUTINE ens_out

  !=============================================================================

  SUBROUTINE thermo_out(n,pKE,s,v,p,spe,ts,hNPA,mass)

    INTEGER, INTENT(in) :: n                          ! natoms
    REAL(KIND=DBL), INTENT(in) :: pKE                 ! physical KE
    REAL(KIND=DBL), INTENT(in) :: s                   ! s_n
    REAL(KIND=DBL), INTENT(in) :: v                   ! volume
    REAL(KIND=DBL), INTENT(in) :: p                   ! pressure
    REAL(KIND=DBL), INTENT(in) :: spe                 ! pot energy
    REAL(KIND=DBL), INTENT(in) :: hNPA                ! NPA Hamiltonian
    REAL(KIND=DBL), DIMENSION(:), INTENT(in) :: mass  ! mass
    INTEGER, INTENT(in) :: ts                         ! timestep

    REAL(KIND=DBL) :: g
    REAL(KIND=DBL) :: cur_temp
    REAL(KIND=DBL) :: cur_H                   ! Helmholtz FE=E+PV
    REAL(KIND=DBL) :: cur_p
    REAL(KIND=DBL) :: cur_rho
    REAL(KIND=DBL) :: cur_KE
    REAL(KIND=DBL) :: hmh0s

    LOGICAL, SAVE :: header=.TRUE.
    REAL(KIND=DBL), PARAMETER :: conv= 1602189.2d0  !1.0d0
    INTEGER, SAVE :: numsteps=0              ! timestep


    IF (header) THEN
       WRITE (ofile,*) '# Run for ', n, 'atoms'
       WRITE (efile,*) '# Run for ', n, 'atoms'
       WRITE (ofile,998) '# timestep','temp','Pressure','Density','KE','U','Total E','s','(H-Ho)s'
       header = .FALSE.
    END IF

    g = DBLE(3*(n-1))+1.0d0
    cur_temp = 2.0d0*pKE/(g*k_boltz)
    cur_p    = p
    cur_rho  = n/v
    cur_KE   = pKE/n
    cur_H    = spe/n

    WRITE (ofile,999) ts, cur_temp, cur_p, cur_rho, cur_KE, cur_H, cur_H+cur_KE, s, hNPA

998 FORMAT(A11,A10,A15,A13,A15,A18,A20,A20,A20)
999 FORMAT(I10,2X,3ES13.5,5ES19.11)

    RETURN

  END SUBROUTINE thermo_out

  !=============================================================================

  SUBROUTINE read_atoms(atm_file, x, sub_box, v)

    REAL(KIND=DBL), DIMENSION(:,:), INTENT(inout) :: sub_box
    REAL(KIND=DBL), DIMENSION(:,:), INTENT(inout) :: x
    REAL(KIND=DBL), INTENT(inout) :: v
    INTEGER, INTENT(in) :: atm_file

    INTEGER :: i, err
    REAL(KIND=DBL) :: xlo,xhi,ylo,yhi,zlo,zhi
    INTEGER :: d1, d2

    READ (atm_file,*)
    READ (atm_file,*) xlo,xhi
    READ (atm_file,*) ylo,yhi
    READ (atm_file,*) zlo,zhi
    READ (atm_file,*)

    IF (xlo .NE. sub_box(1,1) .OR. xhi .NE. sub_box(2,1) .OR.   &
    &   ylo .NE. sub_box(1,2) .OR. yhi .NE. sub_box(2,2) .OR.   &
    &   zlo .NE. sub_box(1,3) .OR. zhi .NE. sub_box(2,3))       THEN

      WRITE(ofile,*) '# Box mismatch; overriding with new box'
      sub_box(1,1) = xlo
      sub_box(2,1) = xhi
      sub_box(1,2) = ylo
      sub_box(2,2) = yhi
      sub_box(1,3) = zlo
      sub_box(2,3) = zhi

      WRITE(ofile,*) '# Old volume', v

      v = (xhi-xlo)*(yhi-ylo)*(zhi-zlo)
      WRITE(ofile,*) '# New volume', v

    END IF

    DO i=1, SIZE(x,2)
      READ(atm_file,*) d1, d2, x(1,i), x(2,i), x(3,i)
    END DO

    RETURN

  END SUBROUTINE read_atoms

  !=============================================================================

END MODULE setup
