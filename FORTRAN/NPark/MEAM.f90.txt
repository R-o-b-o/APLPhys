! NMDC
! A code for molecular dynamics using a Nose-Poincare thermostat and 
! an Andersen barostat.
!
! N Park
! AWE Aldermaston, Reading, Berks
!
! RCS data
! $Id: EAM.f90,v 1.2 2005/05/05 14:51:55 gnpk Exp $

MODULE MEAM

  ! MEAM scheme based on Lee01 (6/02)
  ! Phys Rev B 64, 184102, 2001

  USE kind_mod
  USE setup, ONLY : meam_dat
  IMPLICIT NONE

  PRIVATE

  PUBLIC rho_a_h, scrf, cutf, pair_pot


CONTAINS


  ! =======================================================================

  REAL(KIND=DBL) FUNCTION rho_a_h(h,R,dRho)

    integer, INTENT(in) :: h
    REAL(kind=dbl), INTENT(in) :: R
    REAL(kind=dbl), INTENT(out) :: dRho

    rho_a_h = EXP(-meam_dat%beta(h)*(R/meam_dat%r_e - 1.0d0))

    dRho = -meam_dat%beta(h)/meam_dat%r_e * rho_a_h

    RETURN

  END FUNCTION rho_a_h

  ! =======================================================================

  REAL(kind=dbl) FUNCTION scrf(r_ij, r_ik, r_kj,d_sik,d_skj)

    ! screening function

    REAL(kind=dbl), INTENT(in) :: r_ij, r_ik, r_kj
    REAL(kind=dbl), INTENT(out) :: d_sik,d_skj

    REAL(kind=dbl) :: c1, c2, c3, c4, c5, c6, c7
    real(kind=dbl) :: f, g, x_ik, x_kj

    x_ik = r_ik/r_ij
    x_ik = x_ik*x_ik

    x_kj = r_kj/r_ij
    x_kj = x_kj*x_kj

    c1 = (x_ik + x_kj)
    c2 = (x_ik - x_kj)
    c3 = c2*c2
    c4 = 2.0d0*c1 - c3 - 1.0d0
    c5 = 1.0d0 - c3

    c6 = c4/c5

    f = ((c6-meam_dat%cmin)/(meam_dat%cmax-meam_dat%cmin))

    IF(f.GE.1.0d0) THEN
       scrf = 1.0d0
       d_sik = 0.0d0
       d_skj = 0.0d0
    ELSE IF(0.0d0.LT.f .and. f.LT.1.0d0) THEN
       g = 1.0d0 - f
       g = 1.0d0 - (g*g*g*g)
       scrf = g*g

       c6 = 2.0d0*c2*c4/(c5*c5)
       f = 1.0d0 - f*f*f
       c7 = 8.0d0*g*f

       d_sik = (2.0d0 - 2.0d0*c2)/c5 + c7
       d_skj = (2.0d0 + 2.0d0*c2)/c5 - c7
    ELSE
       scrf = 0.0d0
       d_sik = 0.0d0
       d_skj = 0.0d0
    END IF



  END FUNCTION scrf

  ! =======================================================================

  REAL(kind=dbl) FUNCTION cutf(r,dc)

    ! function = 1-exp(-((rc-r)/dr)**4)
    ! is 1.0 up to rc-2*dr, then goes smoothly (s-curve) to zero at rc

    ! dc is df/dr

    REAL(kind=dbl), INTENT(in) :: r
    REAL(kind=dbl), INTENT(out) :: dc

    REAL(kind=dbl) :: c1, c2

    c1 = (meam_dat%r_c - r)/meam_dat%delr
    c2 = c1*c1*c1
    dc = EXP(-c1*c2)

    cutf = 1.0d0 - dc
    dc = -4.0d0*c2*dc


  END FUNCTION cutf

  ! =======================================================================

  REAL(kind=dbl) FUNCTION pair_pot(r,dphi)

    REAL(kind=dbl), INTENT(in) :: r
    REAL(kind=dbl), INTENT(out) :: dphi

    real(kind=dbl) :: a1, a2, c1, c2, c3, sigma, ds, dpsi, n, ii
    

    c1 = meam_dat%z2*meam_dat%s/meam_dat%z1
    a1 = SQRT(2.0d0)
    sigma = 0.0d0
    ds = 0.0d0

    ii = -1.d0
    c2 = 1.0d0
    a2 = 1.0d0
    DO n=1,10
       c2 = c2*c1
       c3 = ii * c2
       a2 = a2*a1
       sigma = sigma + c3 * psi(r*a2,dpsi)
       ds = ds + c3 * dpsi
       ii = -ii
    END DO

!!$    DO n=1,10
!!$       c2 = merge(-1.0d0,1.0d0,btest(n,0)) * c1**n
!!$       sigma = sigma + c2 * psi(r*a**n,dpsi)
!!$       ds = ds + c2 * dpsi
!!$    END DO


    pair_pot = psi(r,dpsi) + sigma
    dphi = dpsi + ds


  END FUNCTION pair_pot

  ! =======================================================================
  REAL(kind=dbl) FUNCTION rose(r,deu)

    REAL(kind=dbl), INTENT(in) :: r
    REAL(kind=dbl), INTENT(out) :: deu

    real(kind=dbl) :: alpha, c1, c2, c3, a

    alpha = 9.0d0*meam_dat%B*meam_dat%omega/meam_dat%E_c
    alpha = SQRT(alpha)

    c1 = alpha/meam_dat%r_e
    a = c1*r - c1
    c2 = -EXP(-a)
    c3 = a*a

    rose = meam_dat%E_c*(1.0d0+a+meam_dat%d*c3*a)*c2

    deu = meam_dat%E_c*c1*c2*(meam_dat%d*(3.0d0-c3)-1.0d0)

  END FUNCTION rose

  ! =======================================================================

  REAL(kind=dbl) FUNCTION psi(r,dpsi)

    REAL(kind=dbl), INTENT(in) :: r
    REAL(kind=dbl), INTENT(out) :: dpsi

    REAL(kind=dbl) :: c1,c2,c3,c4,deu,drh
    REAL(kind=dbl), SAVE :: rb0re
    LOGICAL, SAVE :: start = .TRUE.

    IF (start) THEN
       rb0re = rhobar_zero(meam_dat%r_e,drh)
       start = .FALSE.
    END IF

    c1 = 2.0d0/meam_dat%z1
    c2 = rhobar_zero(r,drh)/rb0re
    c3 = meam_dat%A*meam_dat%E_c
    c4 = LOG(c2)

    psi = c1*(rose(r,deu) - c2*c3*c4)

    dpsi = c1*(deu - c3*drh*(1.0d0+c4)/rb0re)

  END FUNCTION psi

  ! =======================================================================


  REAL(kind=dbl) FUNCTION rhobar_zero(r,dr0)

    REAL(kind=dbl), INTENT(in) :: r
    REAL(kind=dbl), INTENT(out) :: dr0
    REAL(kind=dbl) :: d, ar, c1

    ar = SQRT(2.0d0) * r
    rhobar_zero = meam_dat%z1 * rho_a_h(0,r,d)
    dr0 = meam_dat%z1 * d
    c1 = meam_dat%z2*meam_dat%s
    rhobar_zero = rhobar_zero + c1*rho_a_h(0,ar,d)
    dr0 = dr0 + c1*d

  END FUNCTION rhobar_zero

  ! =======================================================================

END MODULE MEAM
