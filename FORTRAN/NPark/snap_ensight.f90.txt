! NMDC
! A code for molecular dynamics using a Nose-Poincare thermostat and 
! an Andersen barostat.
!
! N Park
! AWE Aldermaston, Reading, Berks
! RCS data
! $Id: snap_ensight.f90,v 1.5 2005/05/06 07:57:02 gnpk Exp $
!

! Output routine for ENSIGHT
!
! Matt Street, AWE
! 28/8/2003
! Re-written to output in Ensight Gold 7.6 format
! 14/10/2003
! Re-written to output in Ensight Gold 7.6 Fortran Binary format
!


! -------------------------------------------------------------------------
! dump snapshots of atom coords to file

MODULE ens_dump

  USE kind_mod

  IMPLICIT NONE

  INTEGER, SAVE :: ens_count=0

  PRIVATE

  PUBLIC snapshot

CONTAINS

  subroutine snapshot(snapfile, x, v, natoms, time)


    INTEGER, INTENT(in) :: natoms
    CHARACTER(len=*), INTENT(in) :: snapfile
    REAL(KIND=DBL), DIMENSION(3,natoms), INTENT(in) :: x
    REAL(KIND=DBL), DIMENSION(3,natoms), INTENT(in) :: v
    REAL(KIND=DBL), INTENT(in) :: time


    INTEGER           :: i, j, dir, inode, ielt, irequest, ierror, itmp
    INTEGER           :: nbuf, noutput
    CHARACTER(len=50) :: filename
    INTEGER           :: fnlen

    INTEGER, DIMENSION(natoms) :: ibuf
    REAL(KIND=DBL), DIMENSION(natoms) :: buf

    INTEGER, PARAMETER :: geomfile=30
    INTEGER, PARAMETER :: velfile=33

    INTEGER, PARAMETER :: FLOATK=4

    LOGICAL, PARAMETER :: IDgiven = .true. 


    ielt=1
    if(ens_count.gt.9998) CALL error('Get a life')
    !  ens_count = ens_count + 1

    !
    ! open files and write headers
    ! ---------------------------------------------------------
    !

    ! -- geometry
    filename = "ensight/"
    write(filename(9:28), "(a20)") snapfile
    fnlen = len_trim(filename)
    write(filename(fnlen+1:fnlen+4), "(a4)") ".geo"
    write(filename(fnlen+5:fnlen+8), "(i4.4)") ens_count
    write(efile,999) "# Writing Ensight geometry data to ", filename

    open(geomfile, file=filename, status="replace", access="sequential", &
         form="unformatted")

    filename = "ensight/"
    write(filename(9:28),"(a20)") snapfile
    fnlen = len_trim(filename)
    write(filename(fnlen+1:fnlen+4),"(a4)") ".vel"
    write(filename(fnlen+5:fnlen+8),"(i4.4)") ens_count

    open(velfile, file=filename, status="replace", access="sequential", &
         form="unformatted")


    call binrite(geomfile, "Fortran Binary")
    call binrite(geomfile, "Particle geometry file")
    call binrite(geomfile, "for atomistic data ")
    if(IDgiven) then
       call binrite(geomfile, "node id given")
       call binrite(geomfile, "element id given")
    else
       call binrite(geomfile, "node id assign")
       call binrite(geomfile, "element id assign")
    end if

    call binrite(velfile, "Particle velocity vector file")
    call binrite(velfile, "part")
    write(velfile) ielt
    call binrite(velfile, "coordinates")

    ens_count = ens_count + 1



    !
    ! Over all material elements
    !

    !  over_ielt: do ielt = 1, neltypes


    ! -- geometry
    call binrite(geomfile, "part")
    write(geomfile) ielt
    !      if(potential == 4) then
    !        call binrite(geomfile, eltname(ielt))
    !      else
    call binrite(geomfile, "abc")
    !      end if
    call binrite(geomfile, "coordinates")


    ! Get node IDs into the geom file.
    !============================================================================	

    ! Buffer up node IDs - add node offsets here and count them!
    noutput = 0
    do i = 1, natoms
       !      if(eltype(i) == ielt) then
       noutput = noutput + 1
       ibuf(noutput) = i
       !      end if
    end do

    write(geomfile) noutput
    if(IDgiven) write(geomfile) ibuf(1:noutput)



    ! Get XYZ co-ordinates into file
    !============================================================================	
    do dir = 1, 3

       ! buffer up my atom co-ord info in buf1
       j = 0
       do i = 1, natoms
          !        if(eltype(i) == ielt) then
          j       = j + 1
          buf(j) = x(dir,i)
          !        end if
       end do
       noutput=j


       write(geomfile) real(buf(1:noutput), FLOATK)

       j = 0
       do i = 1, natoms
          !        if(eltype(i) == ielt) then
          j       = j + 1
          buf(j) = v(dir,i)
          !        end if
       end do
       noutput=j


       write(velfile) real(buf(1:noutput), FLOATK)


    end do  ! dirs


    !==============================================================================
    ! Get node IDs into the geom file for connectivity.

    !  IDs still stored in holdibuf
    call binrite(geomfile, "point")
    write(geomfile) noutput
    write(geomfile) ibuf(1:noutput)
    write(geomfile) ibuf(1:noutput)





    ! Close file
    close(geomfile)

    ! write casefile data
    call ensight_casefile(snapfile, time)

999 FORMAT(A36, A40)
  end subroutine snapshot




  ! -------------------------------------------------------------------------
  ! close a snapshot file
  !
  subroutine snapclose()


    !  Do nothing for ensight

  end subroutine snapclose


  ! -------------------------------------------------------------------------
  ! write casefile file for ensight
  !
  subroutine ensight_casefile(snapfile, ct)

    CHARACTER(len=*), INTENT(in) :: snapfile
    REAL(KIND=DBL), INTENT(in) :: ct

    CHARACTER(len=30) :: filename
    CHARACTER(len=80) :: bufstr
    INTEGER           :: i, outcount, fnlen
    REAL(KIND=DBL), DIMENSION(10000), save :: tlist



    ! Open file and write header info      
    filename="ensight/"
    write(filename(9:28),"(a20)") snapfile
    fnlen = len_trim(filename)
    write(filename(fnlen+1:fnlen+5),"(a5)") ".case"


    open(35, file=filename, status="replace")
    write(35,*) "FORMAT"
    write(35,*) "type: ensight gold"
    write(35,*)
    write(35,*) "GEOMETRY"
    bufstr = "model:   1   "
    write(bufstr(14:33),"(a20)") snapfile
    fnlen = len_trim(bufstr)
    write(bufstr(fnlen+1:fnlen+8),"(a7)") ".geo***" 
    write(35,*) bufstr
    write(35,*) 

    write(35,*) "VARIABLES"

    bufstr = "vector per node: 1 velocity "
    write(bufstr(29:48),"(a20)") snapfile
    fnlen = len_trim(bufstr)
    write(bufstr(fnlen+1:fnlen+5),"(a5)") ".vel*"
    write(35,*) bufstr
    write(35,*)

    tlist(ens_count) = ct

    write(35,*) "TIME"
    write(35,*) "time set:               1"
    write(35,*) "number of steps:       ", ens_count
    write(35,*) "filename start number:  0"
    write(35,*) "filename increment:     1"
    write(35,*) "time values:"


    ! Output time values
    !    write(35,*) "time values: "
    !      write(35,"(e12.5)") 0.0
    !    close(35)
    outcount = 0
    do while (outcount < ens_count)
       write(35,"(4e12.5)") (tlist(i),i=outcount+1,min(outcount+4,ens_count))
       outcount = outcount+4
    end do
    close(35)


  end subroutine ensight_casefile


  ! -------------------------------------------------------------------------
  ! write binary character string 80 chars wide
  !

  subroutine binrite(file, str)

    INTEGER,          INTENT(in) :: file
    CHARACTER(len=*), INTENT(in) :: str

    character(len=80) :: charbuf

    charbuf = ""
    charbuf = str

    write(file) charbuf

  end subroutine binrite

END MODULE ens_dump
