:class index :MiPage
    ⎕DIV←1
    :include #.Particles
    :field count
    :field labels
    :field r
    :field v
    :field f
    :field neighbours
    :field ∆t
    :field play

    ∇ Compose;s;start
      :Access Public
      Init
      Use'jQuery'
      m←'#m min=1 max=10 step=1'Add _.Input'range' 1 'Mass in kg'
      ⍝m.On'change' 'Change'
      k←'#k min=1 max=10 step=1'Add _.Input'range' 1 'Spring constant in N/m'
      ⍝k.On'change' 'Change'
      eps←'#eps min=-10000 max=1000 step=1'Add _.Input'range' ¯1000 'Lennard Jones well depth in eV?'
      ⍝eps.On'change' 'Change'
      sig←'#sig min=0.01 max=1 step=0.01'Add _.Input'range' 0.08 'Lennard Jones particle diameter'
      ⍝sig.On'change' 'Change'
      (Add _.Button'Start/Stop').On'click' 'StartStop'
⍝
      labels Add⍤1 0⊢_.b ⍝span '●' ⍝ <b>
      '#T'Add _.Timer ∆t
      On'tick' 'Tick'(('k' 'val' '#k')('m' 'val' '#m')('eps' 'val' '#eps')('sig' 'val' '#sig'))
      ⍝ TODO set up as form
     
      Add _.style'b {transition:',∆t F'ms;transition-timing-function:linear;position:absolute;display:block;border-radius:8px;height:15px;width:15px;background:radial-gradient(rgba(127,255,255,1) 10%,rgba(0,255,255,0.9) 30%,transparent 70%)}'
     
     ⍝ Add _.style,⊂(⍕¨r){'#',(⊃⍵),'{top:calc(3*',(1⊃⍺),'vw + 2em);left:calc(3*',(2⊃⍺),'vw)}'}⍤1 0⊢labels
      ⍝∘∘∘
    ∇

    ∇ Init
     
      play←1
      ∆t←200
      count←10*2
      labels←'p',↑⍕¨⍳count
      r←↑,⍳2⍴count*0.5
      v←↑count⍴⊂0 0
      f←↑count⍴⊂0 0
     
     
    ∇

    ∇ js←Change
      :Access public
      js←⍬
    ∇

    ∇ js←StartStop
      :Access public
      play←~play
      js←⍬
    ∇

    ∇ js←Tick
      :Access Public
     ⍝ TODO: Init function called on VALUE ERROR
      :Repeat
          :Trap 6
          ⍝ Simulate one step
              (k m eps sig)←0 Get,¨'k' 'm' 'eps' 'sig'
              :If play
                  (r v f)←((∆t÷1000)m)(k Hooke Grid VVerlet) r v f
                  ⍝(r v f)←((∆t÷1000)m)(eps sig #.Particles.LJ) #.Particles.Grid #.Particles.VVerlet r v f
                  ⍝⍞←r[1;]
                  ⍝⍞←∆t m eps sig ,⊂⍴¨r v f
              :EndIf
              ⍝r+←¯0.01+0.02×?0×r
              ⍝⍞←'-',⊃1↑r
              ⍝⍞←(⊃labels)CSS⍤1⊢1↑r
              js←Execute labels CSS⍤1⊢r
              ⍝⍞←'∨'
              :Return
          :Else
              Init
              ⍝⍞←'×'
          :EndTrap
      :EndRepeat
     
    ∇

    ∇ css←id CSS(top left)
   ⍝   ∘∘∘
    ⍝ Scale and translate postitions for display
      scale←'100'
      pad←'8em'
      ⍝(top left)←scale×top left
      top←'calc(',scale,'*',top F'px + ',pad,')'
      left←'calc(',scale,'*',left F'px + ',pad,')'
     
     ⍝ Format positions for CSS
     ⍝Add _.style,⊂(⍕¨r){'#',(⊃⍵),'{top:calc(3*',(1⊃⍺),'vw + 2em);left:calc(3*',(2⊃⍺),'vw)}'}⍤1 0⊢labels
      ⍝top←(⍕top),'vw + ',pad
      ⍝left←(⍕left),'vw + ',pad
      css←'{"top":"',top F'",'
      css,←'"left":"',left F'"}'
      css←'$("#',(id~' '),'").css(',css,');'
    ∇

    F←{⍵,⍨'¯'⎕r'-'⍕⍺⍺}



:endclass
